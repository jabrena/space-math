#
# https://projecteuler.net/problem=2
#
# Even Fibonacci numbers
# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# 
# By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms.

# Solution

# Inspiration from: https://www.programiz.com/python-programming/examples/fibonacci-sequence
def fibonacciSeq(limit):

	fibonacciList = []

	nterms = limit
	
	# first two terms
	n1, n2 = 1, 2
	count = 0
	
	while count < nterms:

		if(n1 >= limit): 
			break

		if (n1 % 2 == 0):
			fibonacciList.append(n1)
	
		nth = n1 + n2
		n1 = n2
		n2 = nth
		count += 1

	return fibonacciList

def problem(limit) : 
    return sum(fibonacciSeq(limit))

# Asserts
print( problem(100) == sum([2 + 8 + 34]))
print( problem(4000000) == 4613732)